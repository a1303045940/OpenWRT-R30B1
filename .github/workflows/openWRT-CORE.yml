#云编译公用核心
name: openWRT-CORE

on:
  #公用核心标识
  workflow_call:
    inputs:
      openWRT_TARGET:
        required: true
        type: string
      openWRT_THEME:
        required: true
        type: string
      openWRT_NAME:
        required: true
        type: string
      openWRT_URL:
        required: true
        type: string
      openWRT_BRANCH:
        required: false
        type: string
      openWRT_PW:
        required: true
        type: string
      openWRT_IP:
        required: true
        type: string
      WRT_WIFI:
        required: true
        type: string
env:
  GITHUB_TOKEN: ${{secrets.GH_TOKEN}}
  openWRT_TARGET: ${{inputs.openWRT_TARGET}}
  openWRT_THEME: ${{inputs.openWRT_THEME}}
  openWRT_NAME: ${{inputs.openWRT_NAME}}
  openWRT_URL: ${{inputs.openWRT_URL}}
  openWRT_BRANCH: ${{inputs.openWRT_BRANCH}}
  openWRT_PW: ${{inputs.openWRT_PW}}
  openWRT_IP: ${{inputs.openWRT_IP}}
  WRT_WIFI: ${{inputs.WRT_WIFI}}


jobs:
  core:
    name: ${{inputs.openWRT_URL}}
    runs-on: ubuntu-24.04
    steps:
      - name: 创建编译空间挂载点
        run: |
          sudo mkdir -p /openwrt
          sudo chown $USER:$GROUPS /openwrt
          
      - name: 最大化编译空间
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 2048
          swap-size-mb: 1024
          build-mount-path: /openwrt
          overprovision-lvm: 'true'
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: 检查Actions
        uses: actions/checkout@v4
          
      - name: 检查服务器配置
        run: |
          echo "警告⚠"
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
          echo "云编译建议取消勾选Node.js及其相关插件！"
          echo "已知CPU型号（降序）：8370C,8272CL,8171M,E5系列"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
          echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息："
          sudo lshw -short -C memory | grep GiB
          echo -e "\n"
          echo "--------------------------硬盘信息--------------------------"
          echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
          echo "硬盘详情："
          df -Th

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker images -q | xargs -r docker rmi
          sudo -E apt-get -qq update -y
          sudo -E apt-get -qq full-upgrade -y
          sudo -E apt-get -qq install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext \
          genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev \
          libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev \
          libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf \
          python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion \
          swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev libfuse-dev dos2unix
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Initialization Values
        run: |
          export openWRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          export openWRT_REPO=$(basename $GITHUB_WORKSPACE)
          export openWRT_SOURCE=$(echo $openWRT_URL | cut -d '/' -f 5)
          export openWRT_TYPE=$(sed -n "1{s/^#//;s/\r$//;p;q}" $GITHUB_WORKSPACE/Config/$openWRT_TARGET.txt)

          echo "openWRT_SOURCE=$openWRT_SOURCE" >> $GITHUB_ENV
          echo "openWRT_TARGET=$openWRT_TARGET" >> $GITHUB_ENV
          echo "openWRT_DATE=$openWRT_DATE" >> $GITHUB_ENV
          echo "openWRT_TYPE=$openWRT_TYPE" >> $GITHUB_ENV
          echo "openWRT_PW=$openWRT_PW" >> $GITHUB_ENV
          echo "openWRT_IP=$openWRT_IP" >> $GITHUB_ENV
          echo "openWRT_REPO=$openWRT_REPO" >> $GITHUB_ENV

      - name: Check Scripts
        run: |
          dos2unix $(find ./ -maxdepth 2 -type f -iregex ".*\(txt\|sh\)$")
          chmod +x $(find ./ -maxdepth 2 -type f -iname "*.sh")

      - name: Clone openWRT Code
        run: |
          git clone --depth=1 --single-branch --branch $openWRT_BRANCH $openWRT_URL ./openwrt

           cd ./openwrt/ && echo "WRT_HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV

      - name: Check Scripts
        run: |
          find ./ -maxdepth 3 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

      - name: Check Caches
        id: check-cache
        uses: actions/cache@main
        with:
          key: ${{env.openWRT_TARGET}}-${{env.openWRT_TYPE}}-${{env.WRT_HASH}}
          path: |
            ./openwrt/.ccache
            ./openwrt/staging_dir/host*
            ./openwrt/staging_dir/tool*

      - name: Update Caches
        run: |
          if ${{steps.check-cache.outputs.cache-hit == 'true'}}; then
            sed -i 's/ $(tool.*\/stamp-compile)//g' ./openwrt/Makefile
            sed -i 's/ $(tool.*\/stamp-install)//g' ./openwrt/Makefile

            echo "toolchain skiped done!"
          else
            gh extension install actions/gh-actions-cache

            CACHE_LIST=$(gh actions-cache list --key "$openWRT_TARGET-$openWRT_TYPE" | cut -f 1)
            for CACHE_KEY in $CACHE_LIST; do
               gh actions-cache delete $CACHE_KEY --confirm
            done

            echo "caches cleanup done!"
          fi

      - name: Update Feeds
        run: |
          cd ./openwrt

          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Custom Scripts
        run: |
          cd ./openwrt

          $GITHUB_WORKSPACE/Scripts/Settings.sh

          cd ./package

          $GITHUB_WORKSPACE/Scripts/Plugins.sh
          

      - name: Custom Settings
        run: |
          cd ./openwrt

          rm -rf ./tmp* ./.config*
          cat $GITHUB_WORKSPACE/Config/$openWRT_TARGET.txt $GITHUB_WORKSPACE/Config/General.txt >> .config

          $GITHUB_WORKSPACE/Scripts/Extras.sh

          #lede/target/linux/mediatek/dts/mt7981b-cmcc-rax3000m.dts
          cp "$GITHUB_WORKSPACE/r30b1/r30b1.dts" target/linux/mediatek/dts/mt7981b-cmcc-rax3000m.dts
          chmod +x target/linux/mediatek/dts/mt7981b-cmcc-rax3000m.dts

          make defconfig

      - name: Cleanup Toolchain
        run: |
          cd ./openwrt

          make dirclean

      - name: Download Packages
        run: |
          cd ./openwrt

          make download -j$(nproc)

      - name: View Config
        run: |
          cd ./openwrt

          cat .config
      
      - name: Compile Firmware
        run: |
          cd ./openwrt

          make -j$(nproc) || make -j1 V=s

          echo "======================="
          lscpu | egrep "name|Core|Thread"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1
          echo "======================="

      - name: Package Firmware
        run: |
          cd ./openwrt && mkdir ./upload

          rm -rf $(find ./bin/targets/ -iregex ".*\(json\|manifest\|buildinfo\|sha256sums\|packages\)$")
          cp -rf $(find ./bin/targets/ -type f -iname "*.*") ./upload/
          cp -rf ./.config ./upload/Config_"$openWRT_TARGET"_"$openWRT_SOURCE"_"$openWRT_DATE".txt

          cd ./upload

          $GITHUB_WORKSPACE/Scripts/Renames.sh

      - name: Release Firmware
        uses: softprops/action-gh-release@master
        with:
          tag_name: ${{env.openWRT_TARGET}}_${{env.openWRT_SOURCE}}_${{env.openWRT_DATE}}
          files: ./openwrt/upload/*.*
          body: |
            r30b1固件

            源码地址: ${{env.openWRT_URL}}
            源码：${{env.openWRT_SOURCE}}
            平台：${{env.openWRT_TARGET}}
            设备：${{env.openWRT_TYPE}}
            密码：${{env.openWRT_PW}}
            地址：${{env.openWRT_IP}}

      - name: Delete Old Releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 5
          delete_tags: false

      - name: Delete Old Workflows
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 0
          keep_minimum_runs: 1
